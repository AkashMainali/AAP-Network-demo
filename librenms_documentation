#!/usr/bin/env python
import requests
import json
import sys

#Shebang Line (#!/usr/bin/env python):
#This line specifies the interpreter that should be used to execute the script. In this case, it's Python.
#Import Statements:
#import requests: Imports the requests library, which is used for making HTTP requests.
#import json: Imports the json library, which is used for handling JSON data.
#import sys: Imports the sys module, which provides access to some variables used or maintained by the Python interpreter.

# LibreNMS API settings
LIBRENMS_API_URL = "https://your-librenms-instance/api/v0/"
LIBRENMS_API_TOKEN = "your-api-token"
#LibreNMS API Settings:
#These are variables that store the URL and API token needed to connect to the LibreNMS API.

# Ansible dynamic inventory dictionary
ansible_inventory = {"all": {"hosts": [], "vars": {}}, "_meta": {"hostvars": {}}}
#Ansible Dynamic Inventory Dictionary:
#This is the main data structure that will store the dynamic inventory information. 
#It's initialized with a basic structure containing an "all" group and some additional metadata.

def get_librenms_devices():
    try:
        headers = {"Authorization": f"Bearer {LIBRENMS_API_TOKEN}"}
        response = requests.get(f"{LIBRENMS_API_URL}devices", headers=headers)
        response.raise_for_status()  # Raise an error for bad responses (4xx, 5xx)
        devices = response.json()
        return devices
    except requests.exceptions.RequestException as e:
        print(f"Error connecting to LibreNMS API: {e}")
        sys.exit(1)
#Function get_librenms_devices():
#This function uses the requests library to make a GET request to the LibreNMS API to fetch information about devices.
#It includes error handling to check for issues with the API request. If an error occurs, it prints an error message and exits the script.

def populate_ansible_inventory(devices):
    for device in devices:
        hostname = device["hostname"]
        ip_address = device.get("ipv4", "")  # Use empty string if IPv4 is not available
        device_groups = device.get("groups", [])
        region = device.get("region", "Unknown")  # Replace "Unknown" with the default region if not available
        device_type = device.get("type", "Unknown")
        site = device.get("site", "Unknown")
        vendor = device.get("vendor", "Unknown")
        model = device.get("hardware", "Unknown")
#Function populate_ansible_inventory(devices):
#his function takes the devices retrieved from the LibreNMS API and populates the Ansible dynamic inventory dictionary with information about each device.
#It iterates through each device and extracts various attributes such as hostname, ip_address, device_groups, region, device_type, site, vendor, and model.

        # Add the host to the 'all' group
        ansible_inventory["all"]["hosts"].append(hostname)
        # Populate hostvars with additional information (if needed)
        ansible_inventory["_meta"]["hostvars"][hostname] = {
            "ansible_host": ip_address,
            "groups": device_groups,
            "region": region,
            "type": device_type,
            "site": site,
            "vendor": vendor,
            "model": model,
        }
#Adding Hosts to 'all' Group and Populating Host Variables:
#For each device, the script adds the host to the 'all' group in the Ansible dynamic inventory.
#Host-specific variables, including ansible_host and other attributes, are stored in the _meta section of the inventory under hostvars.
        # Add the host to specific groups based on device attributes
        for group in device_groups:
            if group not in ansible_inventory:
                ansible_inventory[group] = {"hosts": []}
            ansible_inventory[group]["hosts"].append(hostname)

#Adding Hosts to Specific Groups:
#For each device, the script adds the host to specific groups based on the device_groups attribute.
        # Add the host to region-based groups
        if region not in ansible_inventory:
            ansible_inventory[region] = {"hosts": []}
        ansible_inventory[region]["hosts"].append(hostname)

        # Add the host to type-based groups
        if device_type not in ansible_inventory:
            ansible_inventory[device_type] = {"hosts": []}
        ansible_inventory[device_type]["hosts"].append(hostname)

        # Add the host to site-based groups
        if site not in ansible_inventory:
            ansible_inventory[site] = {"hosts": []}
        ansible_inventory[site]["hosts"].append(hostname)

        # Add the host to vendor-based groups
        if vendor not in ansible_inventory:
            ansible_inventory[vendor] = {"hosts": []}
        ansible_inventory[vendor]["hosts"].append(hostname)

        # Add the host to model-based groups
        if model not in ansible_inventory:
            ansible_inventory[model] = {"hosts": []}
        ansible_inventory[model]["hosts"].append(hostname)
#Adding Hosts to Attribute-based Groups:
#The script adds the host to groups based on various attributes such as region, device_type, site, vendor, and model.

if __name__ == "__main__":
    librenms_devices = get_librenms_devices()
    populate_ansible_inventory(librenms_devices)

    print(json.dumps(ansible_inventory, indent=2))

#Script Execution:
#The __main__ block of the script fetches devices from LibreNMS using the get_librenms_devices function.
#It then populates the Ansible dynamic inventory using the populate_ansible_inventory function.
#Finally, it prints the generated dynamic inventory in JSON format with indentation for readability.
#This script is designed to dynamically generate an Ansible inventory based on information retrieved from LibreNMS, and it organizes hosts into groups based on various attributes. 
#Note:: need to customize it according to the specific attributes available in your LibreNMS instance and the grouping logic you desire.